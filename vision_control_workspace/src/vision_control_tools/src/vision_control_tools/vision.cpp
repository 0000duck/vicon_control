// Declarations
#include "vision_control_tools/vision.h"

// Vision control tools
#include "vision_control_tools/ros_object.h"		// vision_control_tools::ros_object

// Constructor
void Vision::init(VisionController* controller)
{
	// Initialize publisher and subscriber
	ros::NodeHandle n;
	pub_ = n.advertise<vision_control_tools::reference>("reference_update", 1);
	sub_ = n.subscribe<vision_control_tools::ros_object_array>("object_update", 1, onObjectUpdate);

	// Set controller
	controller_ = controller;
}

// Handle for when an update message has arrived
void Vision::onObjectUpdate(const vision_control_tools::ros_object_array::ConstPtr& msg)
{
	// Publish message generated by set controller
	pub_.publish(controller_->objectsToReference(msg));
}

// Destructor
void Vision::terminate()
{
	// Shutdown publisher and subscriber
	pub_.shutdown();
	sub_.shutdown();
}